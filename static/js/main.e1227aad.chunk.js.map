{"version":3,"sources":["page/xrSpatialControls.js","App.js","reportWebVitals.js","index.js"],"names":["camera","scene","renderer","controller1","controller2","controllerGrip1","controllerGrip2","player","destination","room","cube","box","playerPos","THREE","destinationPos","result","tmp","tmpQuaternion","controlledObj","multipliedScalar","teleport","TranslateHelperGeometry","geometry","setAttribute","matHelper","depthTest","depthWrite","transparent","side","fog","toneMapped","deltaLine","deltaLine2","Main","containerRef","useRef","canvasRef","vrButtonConRef","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","handleController","controller","userData","isSelecting","render","rotation","x","y","visible","getWorldPosition","subVectors","multiplyScalar","position","copy","add","getWorldQuaternion","set","sub","scale","useEffect","background","color","translate","light","onSelectStart","this","console","log","onSelectEnd","onMove","onLeftSqueezeStart","onRightSqueezeStart","normalize","antialias","canvas","current","xr","enabled","setPixelRatio","devicePixelRatio","setFramebufferScaleFactor","appendChild","VRButton","createButton","getController","addEventListener","controllerModelFactory","XRControllerModelFactory","getControllerGrip","createControllerModel","material","geometry2","material2","wireframe","init","setAnimationLoop","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1227aad.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\nimport React, {  useEffect, useRef } from \"react\";\r\n\r\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton.js';\r\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory.js';\r\n\r\nvar camera, scene, renderer;\r\nvar controller1, controller2;\r\nlet controllerGrip1, controllerGrip2;\r\n\r\nlet player, destination;\r\n\r\nvar room;\r\n\r\nlet playerPos = new THREE.Vector3();\r\nlet destinationPos = new THREE.Vector3();\r\n// let cubePos = new THREE.Vector3();\r\n\r\nlet result = new THREE.Vector3();\r\n\r\nlet tmp = new THREE.Vector3();\r\nlet tmpQuaternion = new THREE.Quaternion();\r\n\r\n\r\nlet cube, box\r\n\r\nconst controlledObj = {\r\n    multipliedScalar: 3,\r\n    teleport: () => { }\r\n\r\n}\r\n\r\n// var count = 0, amount = 1000;\r\n// var instancedMesh, objects = [];\r\n\r\n// var clock = new THREE.Clock();\r\n// let  scene, camera, renderer;\r\n// const clock = new THREE.Clock();\r\n\r\n\r\n\r\nfunction TranslateHelperGeometry() {\r\n\r\n    const geometry = new THREE.BufferGeometry();\r\n\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3));\r\n\r\n    return geometry;\r\n\r\n}\r\n\r\n\r\nconst matHelper = new THREE.MeshBasicMaterial({\r\n    depthTest: false,\r\n    depthWrite: false,\r\n    transparent: true,\r\n    side: THREE.DoubleSide,\r\n    fog: false,\r\n    toneMapped: false\r\n});\r\n\r\n\r\nlet deltaLine = new THREE.Line(TranslateHelperGeometry(), matHelper);\r\n\r\nlet deltaLine2 = new THREE.Line(TranslateHelperGeometry(), matHelper)\r\n\r\n\r\nexport default function Main() {\r\n    const containerRef = useRef();\r\n    const canvasRef = useRef();\r\n    const vrButtonConRef = useRef();\r\n\r\n    useEffect(() => {\r\n        init();\r\n        animate();\r\n\r\n            //eslint-disable-next-line\r\n    }, []);\r\n\r\n    function init() {\r\n        scene = new THREE.Scene();\r\n        scene.background = new THREE.Color(0x404040);\r\n        scene.fog = new THREE.Fog(scene.background, 10, 15);\r\n\r\n        camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 20);\r\n        camera.position.set(0, 1.6, 0);\r\n\r\n        var color = new THREE.Color(0x505050);\r\n        room = new THREE.GridHelper(20, 40, color, color);\r\n        room.geometry.translate(0, -0.01, 0); // fix z-fighting\r\n        scene.add(room);\r\n\r\n        scene.add(new THREE.HemisphereLight(0x606060, 0x404040));\r\n\r\n        const light = new THREE.DirectionalLight(0xffffff);\r\n        light.position.set(1, 1, 1).normalize();\r\n        scene.add(light);\r\n\r\n        // renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvasRef.current });\r\n        renderer.xr.enabled = true;\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.xr.setFramebufferScaleFactor(2.0);\r\n        vrButtonConRef.current.appendChild(VRButton.createButton(renderer));\r\n\r\n        // controllers\r\n        function onSelectStart() {\r\n\r\n            this.userData.isSelecting = true;\r\n            console.log(this)\r\n\r\n\r\n\r\n        }\r\n\r\n        function onSelectEnd() {\r\n\r\n            this.userData.isSelecting = false;\r\n            console.log(this)\r\n\r\n            Test();\r\n\r\n            // Test 함수 의 호출을 여기서 ... \r\n        }\r\n\r\n        function onMove() {\r\n            console.log('moved')\r\n        }\r\n\r\n        function onLeftSqueezeStart(){\r\n            controlledObj.multipliedScalar++\r\n            console.log(controlledObj.multipliedScalar)\r\n        }\r\n\r\n        function onRightSqueezeStart(){\r\n            controlledObj.multipliedScalar--\r\n            console.log(controlledObj.multipliedScalar)\r\n        }\r\n\r\n        controller1 = renderer.xr.getController(0);\r\n        controller1.addEventListener('selectstart', onSelectStart);\r\n        controller1.addEventListener('selectend', onSelectEnd);\r\n        controller1.addEventListener('select', onMove);\r\n\r\n        controller1.addEventListener('squeezestart', onLeftSqueezeStart);\r\n        // controller1.addEventListener('squeezeEnd', onMove);\r\n        // controller1.addEventListener('squeeze', onMove);\r\n        scene.add(controller1);\r\n\r\n        controller2 = renderer.xr.getController(1);\r\n        controller2.addEventListener('selectstart', onSelectStart);\r\n        controller2.addEventListener('selectend', onSelectEnd);\r\n\r\n        controller2.addEventListener('squeezestart', onRightSqueezeStart);\r\n        // controller2.addEventListener('squeezeEnd', onMove);\r\n        // controller2.addEventListener('squeeze', onMove);\r\n        scene.add(controller2);\r\n\r\n\r\n\r\n        const controllerModelFactory = new XRControllerModelFactory();\r\n\r\n        controllerGrip1 = renderer.xr.getControllerGrip(0);\r\n        controllerGrip1.add(controllerModelFactory.createControllerModel(controllerGrip1));\r\n        scene.add(controllerGrip1);\r\n\r\n        controllerGrip2 = renderer.xr.getControllerGrip(1);\r\n        controllerGrip2.add(controllerModelFactory.createControllerModel(controllerGrip2));\r\n        scene.add(controllerGrip2);\r\n\r\n        //\r\n\r\n        window.addEventListener('resize', onWindowResize, false);\r\n\r\n        player = new THREE.Mesh(new THREE.SphereBufferGeometry(0.05, 100, 100), new THREE.MeshStandardMaterial({ color: \"green\" }));\r\n        player.position.set(0, 0.05, 0);\r\n        // controllerGrip1.add(player)\r\n        controller2.add(player)\r\n        // scene.add(player);\r\n\r\n        destination = new THREE.Mesh(new THREE.SphereBufferGeometry(0.05, 100, 100), new THREE.MeshStandardMaterial({ color: \"yellow\" }));\r\n        destination.position.set(0, 0.05, 0);\r\n        controller1.add(destination);\r\n\r\n\r\n\r\n        scene.add(deltaLine)\r\n        scene.add(deltaLine2)\r\n\r\n\r\n\r\n\r\n        var geometry = new THREE.BoxGeometry(1, 1, 1);\r\n        var material = new THREE.MeshNormalMaterial();\r\n        cube = new THREE.Mesh(geometry, material);\r\n        scene.add(cube);\r\n\r\n\r\n        var geometry2 = new THREE.BoxGeometry(1, 1, 1);\r\n        var material2 = new THREE.MeshNormalMaterial({ wireframe: true });\r\n        box = new THREE.Mesh(geometry2, material2);\r\n        scene.add(box);\r\n\r\n\r\n    }\r\n\r\n    function onWindowResize() {\r\n\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    }\r\n\r\n    function handleController(controller) {\r\n\r\n        if (controller.userData.isSelecting) {\r\n\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //\r\n\r\n    function animate() {\r\n\r\n        renderer.setAnimationLoop(render);\r\n\r\n    }\r\n\r\n    function render() {\r\n\r\n        handleController(controller1);\r\n        handleController(controller2);\r\n\r\n        // var delta = clock.getDelta(); \r\n\r\n        cube.rotation.x += 0.01;\r\n        cube.rotation.y += 0.01;\r\n\r\n        deltaLine.visible = true;\r\n        // deltaLine2.visible = true\r\n        player.getWorldPosition(playerPos)\r\n        destination.getWorldPosition(destinationPos)\r\n\r\n        tmp.subVectors(destinationPos, playerPos)\r\n\r\n        tmp.multiplyScalar(controlledObj.multipliedScalar);\r\n        box.position.copy(tmp.add(cube.position))\r\n\r\n        player.getWorldQuaternion(tmpQuaternion);\r\n\r\n        deltaLine.position.copy(playerPos);\r\n        tmp.set(1e-10, 1e-10, 1e-10).add(destinationPos).sub(playerPos);\r\n        deltaLine.scale.copy(tmp);\r\n\r\n        deltaLine2.position.copy(cube.position);\r\n        tmp.set(1e-10, 1e-10, 1e-10).add(cube.position).sub(box.position).multiplyScalar(- 1);\r\n        deltaLine2.scale.copy(tmp);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        renderer.render(scene, camera);\r\n\r\n    }\r\n\r\n\r\n    function Test() {\r\n        result = tmp.subVectors(destinationPos, playerPos)\r\n        cube.position.add(result.multiplyScalar(controlledObj.multipliedScalar));\r\n    }\r\n\r\n\r\n    // function ThumbMove() {\r\n    //     var handedness = \"unknown\";\r\n\r\n    //     //determine if we are in an xr session\r\n    //     const session = renderer.xr.getSession();\r\n    //     let i = 0;\r\n\r\n    //     if (session) {\r\n\r\n    //         console.log(session.inputSources);\r\n    //         // 그냥 squeeze 버튼으로 조정 ????\r\n    //     }\r\n\r\n    // }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div ref={containerRef}>\r\n            <canvas ref={canvasRef} />\r\n            <div ref={vrButtonConRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import './App.css';\nimport Basic from './page/xrSpatialControls'\n\n\n\n\n\nfunction App() {\n\n\n  return (\n   <Basic />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}