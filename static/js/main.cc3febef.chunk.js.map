{"version":3,"sources":["Utils/InfiniteGridHelper.js","Utils/utils.js","Utils/loader.js","../../src/index.js","Page/joystickRotateSpatial.js","App.js","index.js"],"names":["InfiniteGridHelper","size1","size2","color","distance","axes","THREE","planeAxes","substr","geometry","material","side","uniforms","uSize1","value","uSize2","uColor","uDistance","transparent","vertexShader","fragmentShader","extensions","derivatives","grid","frustumCulled","SceneSetUp","scene","background","setPath","load","add","light","directionalLight","hemiLight","spotLight","position","set","castShadow","LightSetUp","prototype","Loader","path","root","after","loader","GLTFLoader","setDRACOLoader","DRACOLoader","setDecoderPath","setKTX2Loader","KTX2Loader","setTranscoderPath","setMeshoptDecoder","MeshoptDecoder","gltf","scene2","scenes","Error","tmpQuaternion","tmpMatrix","centerVec","upVec","cameraVec","forwardVec","rightVec","tmpVec","directionVec","tmp","isOculusBrowser","test","navigator","TranslateHelperGeometry","camera","renderer","spatialControls","matHelper","depthTest","depthWrite","fog","toneMapped","constructor","rightHanded","multiplyScalar","destMarker","cone","wireframe","Math","playerHandHelper","destHandHelper","onSelectEnd","onFromSqueezeStart","onToSqueezeStart","controller0","controller1","update","this","_tmpVector","_cameraRig","_destMarker","session","_xr","sourceXR","teleport","subVectors","_resultVector","Main","containerRef","useRef","canvasRef","vrButtonConRef","Animate","render","useEffect","antialias","canvas","current","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","xr","setFramebufferScaleFactor","setAnimationLoop","appendChild","VRButton","createButton","enabled","cameraRig","getController","addEventListener","aspect","updateProjectionMatrix","resizer","controllerModelFactory","XRControllerModelFactory","controllerGrip1","getControllerGrip","createControllerModel","controllerGrip2","obj","scale","font","size","height","geometry2","SpatialControls","Init","style","overflowX","overflowY","ref","App","ReactDOM","document","getElementById"],"mappings":"+TAGe,SAASA,EAAoBC,EAAOC,EAAOC,EAAOC,GAA0B,IAAhBC,EAAe,uDAAR,MAEjFF,EAAQA,GAAS,IAAIG,IAAa,SAClCL,EAAQA,GAAS,GACjBC,EAAQA,GAAS,IAEjBE,EAAWA,GAAY,IAIvB,IAAMG,EAAYF,EAAKG,OAAQ,EAAG,GAE5BC,EAAW,IAAIH,KAA2B,EAAG,EAAG,EAAG,GAEnDI,EAAW,IAAIJ,KAAsB,CAE1CK,KAAML,IAENM,SAAU,CACTC,OAAQ,CACPC,MAAOb,GAERc,OAAQ,CACPD,MAAOZ,GAERc,OAAQ,CACPF,MAAOX,GAERc,UAAW,CACVH,MAAOV,IAGTc,aAAa,EACbC,aAAa,gMAAD,OAQwBd,EARxB,8CASQE,EATR,8BASuCA,EATvC,2MAmBZa,eAAe,yVAAD,OAayBb,EAbzB,kZA0BgDA,EA1BhD,2BA0B4EA,EA1B5E,weA0Cdc,WAAY,CACXC,aAAa,KAUXC,EAAO,IAAIjB,IAAWG,EAAUC,GAIpC,OAFAa,EAAKC,eAAgB,EAEdD,EC1FD,SAASE,EAAWC,GAEvB,IAAMC,GAAa,IAAIrB,KAClBsB,QAAQ,2BACRC,KAAK,CACF,gBACA,gBACA,gBACA,gBACA,gBACA,kBAGRH,EAAMC,WAAaA,EAEnB,IAAMJ,EAAO,IAAIvB,EAAmB,GAAI,KACxC0B,EAAMI,IAAIP,GAMd,SAAoBG,GAChB,IAAMK,EAAQ,IAAIzB,IAAmB,SACrCoB,EAAMI,IAAIC,GAEV,IAAMC,EAAmB,IAAI1B,IAAuB,SAAU,IAC9DoB,EAAMI,IAAIE,GACV,IAAMC,EAAY,IAAI3B,IAAsB,SAAU,OAAU,GAChEoB,EAAMI,IAAIG,GACV,IAAMC,EAAY,IAAI5B,KAAgB,SAAU,GAChD4B,EAAUC,SAASC,KAAK,GAAI,IAAK,IACjCF,EAAUG,YAAa,EAdvBC,CAAWZ,GD4Ef1B,EAAmBuC,UAAnB,uCACIjC,IAAWiC,WACXjC,IAAeiC,WACfjC,IAAsBiC,W,oCElHX,SAASC,EAAOC,EAAMC,GAAsB,IAAfC,EAAc,uDAAR,aAC1CC,GAAS,IAAIC,KAEhBC,gBAAe,IAAIC,KAAcC,eAAe,iBAChDC,eAAc,IAAIC,KAAaC,kBAAkB,iBACjDC,kBAAkBC,KAMrBT,EAAOf,KAAKY,GAAM,SAACa,GACjB,IAAMC,EAASD,EAAK5B,OAAS4B,EAAKE,OAAO,GAEzC,IAAKD,EAEH,MAAM,IAAIE,MACR,6GAKJf,EAAKZ,IAAIyB,GACTZ,EAAMY,M,+CCzBJG,EAAgB,IAAtB,IACMC,EAAY,IAAlB,IAEMC,EAAY,IAAI,EAAJ,MAAlB,GACMC,EAAQ,IAAI,EAAJ,MAAd,GAEMC,EAAY,IAAlB,IACMC,EAAa,IAAnB,IACMC,EAAW,IAAjB,IACMC,EAAS,IAAf,IACMC,EAAe,IAArB,IAEMC,EAAM,IAAZ,IAEMC,EAAkB,gBAAgBC,KAAKC,UAA7C,WAEA,SAASC,IACP,IAAM9D,EAAW,IAAjB,IAEA,OADAA,0BAAkC,IAAI,EAAJ,EAAiC,CAAC,EAAG,EAAG,EAAG,EAAG,EAA9C,GAAlCA,IACA,EAGF,ICbIiB,EAAO8C,EAAQC,EACfC,EDYEC,EAAY,IAAI,EAAJ,EAA4B,CAC5CC,WAD4C,EAE5CC,YAF4C,EAG5C3D,aAH4C,EAI5CP,KAJ4C,IAK5CmE,KAL4C,EAM5CC,YAAY,I,oDAIZC,WAAW,SAYT,+DAZS,GAKT,EAOA,EAPA,WAOA,IALEC,mBAKF,SAPA,EAOA,EAPA,mBAOA,EAPA,eAOA,IAFEC,sBAEF,MAFmB,EAEnB,EAUA,GAVA,qBACA,gBAEA,IAAWT,EAAX,GAGA,eAEA,UAAeQ,EAAc,QAA7B,YAEA,IAAIE,EAA0B,CAC5BA,EAAa,IAAbA,IACA,IAAMC,EAAO,IAAI,EAAJ,EAAe,IAAI,EAAJ,SAAf,IAAqD,IAAI,EAAJ,EAA6B,CAAEC,WAAW,KAC5GD,UAAa,GAAKE,KAAL,GAAbF,KACAD,SACA,2BAIF,cAAmB,IAAnB,IACA,yCAEA,IAAII,GAGF,qBAKF,YAAiB,IAAjB,IACA,uCACA,IAAIC,GAGF,mBAKF,iBAAsB,IAAtB,IACA,eAAoB,IAApB,IAGA,gBAEA,aAAkB,IAAlB,IACA,gBAAqB,IAArB,IAGA,oBAEA,cAAmB,IAAI,EAAJ,EAAejB,IAAlC,GACA,eAAoB,cAApB,QAEA,wBAA2B,EAA3B,aACA,wBAA2B,EAA3B,cAEA,IAAMkB,EAAc,WAClB,cAGIC,EAAqB,WACzB,uBAGIC,EAAmB,WACvB,sBAnEF,OAsEAC,kCACAC,kCAEIZ,KAAJ,GACEW,MAAgB,EAAhBA,WACAC,MAAgB,EAAhBA,aACAD,qCACAC,uCAEAD,MAAgB,EAAhBA,aACAC,MAAgB,EAAhBA,WACAD,qCACAC,sCAGFlC,WAA4B,IAAI,EAAJ,MAA5BA,MAEAD,2BACA,2CAxFA,E,0CA2FFoC,WACEC,KAAA,6BAAkCA,KAAlC,gBACAA,KAAA,2BAAgCA,KAAhC,cAEAA,KAAA,sBAA2BA,KAA3B,aAA8CA,KAA9C,gBAEAA,KAAA,0BAA+BA,KAA/B,iBACAA,KAAA,0BACEA,KAAKC,WAAWlE,IAAIiE,KAAKE,WAD3B,WAKAF,KAAA,0BAA+BA,KAA/B,gBACA5B,6BAAiC4B,KAAjC5B,kBAAwD4B,KAAxD5B,gBACA4B,KAAA,0BAEAA,KAAA,2BAAgCA,KAAKE,WAArC,UACA9B,6BAAiC4B,KAAKE,WAAtC9B,cAA+D4B,KAAKG,YAApE/B,6BACA4B,KAAA,2BAGA,IAAMI,EAAUJ,KAAKK,IAArB,aACA,KAAa,qBAEYD,EAAvB,cAFW,IAEX,2BAA6C,KAA7C,EAA6C,QAE3C,GAAKE,EAAL,UAEEA,GACAA,EADAA,UAECA,mBAA4BA,eAF7BA,KAGAA,eAAwBN,KAJ1B,SAKE,CAMA,IAAM1F,EAAOgG,UAAb,KAEAN,KAAA,+BAGAhC,MACED,EADFC,IAGED,EAHFC,GAMAC,UAEAA,mBAA+BsB,QAA/BtB,GAEAD,kBAA2B1D,EAA3B0D,IACAC,kBAAyB3D,EAAzB2D,IAEAC,kBAEAA,cAEAN,gBAEAD,2BACAqC,KAAA,2CAzCO,kC,sBAgDfO,WACEP,KAAA,cAAqBA,KAAKC,WAAWO,WACnCR,KADmB,aAEnBA,KAFF,gBAIAA,KAAA,wBACEA,KAAKS,cAActB,eAAea,KADpC,kBAIAA,KAAA,iCAEApC,gBAEAD,2BACAqC,KAAA,4C,GA5LW,KCnBA,SAASU,IACtB,IAAMC,EAAeC,mBACfC,EAAYD,mBACZE,EAAiBF,mBAkHvB,SAASG,IACPpC,EAAgBoB,SAEhBrB,EAASsC,OAAOrF,EAAO8C,GAGzB,OAtHAwC,qBAAU,YAMV,YAIEvC,EAAW,IAAInE,KAAoB,CACjC2G,WAAW,EACXC,OAAQN,EAAUO,WAEXC,cAAcC,OAAOC,kBAC9B7C,EAAS8C,QAAQF,OAAOG,WAAYH,OAAOI,aAC3ChD,EAASiD,GAAGC,0BAA0B,GACtClD,EAASmD,iBAAiBd,GAE1BD,EAAeM,QAAQU,YAAYC,IAASC,aAAatD,IAIzD/C,EAAQ,IAAIpB,KACZmE,EAASiD,GAAGM,SAAU,EACtBxD,EAAS,IAAIlE,IAAwB,GAAG+G,OAAOG,WAAaH,OAAOI,YAAY,GAAI,KACnF,IAAIQ,EAAY,IAAI3H,IAChBsF,EAAcnB,EAASiD,GAAGQ,cAAc,GACxCrC,EAAcpB,EAASiD,GAAGQ,cAAc,GAE5CxG,EAAMI,IAAImG,GACVA,EAAUnG,IAAI0C,GACdyD,EAAUnG,IAAI8D,GACdqC,EAAUnG,IAAI+D,GAIdpE,EAAWC,GACX2F,OAAOc,iBAAiB,UAAU,kBHtD/B,SAAiB3D,EAAQC,GAM5BD,EAAO4D,OAASf,OAAOG,WAAaH,OAAOI,YAG3CjD,EAAO6D,yBAGP5D,EAAS8C,QAAQF,OAAOG,WAAYH,OAAOI,aAG3ChD,EAAS2C,cAAcC,OAAOC,kBGuCUgB,CAAQ9D,EAAQC,MAExD,IAAM8D,EAAyB,IAAIC,IAE/BC,EAAkBhE,EAASiD,GAAGgB,kBAAkB,GACpDD,EAAgB3G,IACdyG,EAAuBI,sBAAsBF,IAG/C,IAAIG,EAAkBnE,EAASiD,GAAGgB,kBAAkB,GACpDE,EAAgB9G,IACdyG,EAAuBI,sBAAsBC,IAG/CX,EAAUnG,IAAI2G,GACdR,EAAUnG,IAAI8G,GAEd,IAAIzD,EAAa,IAAI7E,IACrBoB,EAAMI,IAAIqD,GAEV3C,EAAO,qBAAsB2C,GAG7B3C,EAAO,mBAAoBd,GAAO,SAACmH,GACjCA,EAAIC,MAAM1G,IAAI,GAAI,GAAI,IACtByG,EAAI1G,SAASC,IAAI,EAAG,GAAI,OAI1B,IAAMQ,EAAS,IAAItC,IAEfiF,EAAmB,IAAIjF,IACvBkF,EAAiB,IAAIlF,IAEzBsC,EAAOf,KAAK,0CAA0C,SAACkH,GACrD,IAAMtI,EAAW,IAAIH,KAAmB,OAAQ,CAC9CyI,KAAMA,EACNC,KAAM,IACNC,OAAQ,MAGV1D,EAAiBzD,IACf,IAAIxB,IAAWG,EAAU,IAAIH,MAG/B,IAAM4I,EAAY,IAAI5I,KAAmB,KAAM,CAC7CyI,KAAMA,EACNC,KAAM,IACNC,OAAQ,MAGVzD,EAAe1D,IACb,IAAIxB,IAAW4I,EAAW,IAAI5I,SAOlCoE,EAAkB,IAAIyE,EACpB1E,EACAwD,EACArC,EACAC,EACA,CACEV,WAAYA,IAtGhBiE,KAGC,IAmHD,yBACEC,MAAO,CACLJ,OAAQ,QACRK,UAAW,SACXC,UAAW,UAEbC,IAAK9C,GAEL,4BAAQ8C,IAAK5C,IACb,yBAAK4C,IAAK3C,KCzIhB,IAIe4C,EAJH,WACV,OAAO,kBAAC,EAAD,OCNTC,IAAS3C,OAAO,kBAAC,EAAD,MAAS4C,SAASC,eAAe,W","file":"static/js/main.cc3febef.chunk.js","sourcesContent":["import * as THREE from 'three'\r\n\r\n// Author: Fyrestar https://mevedia.com (https://github.com/Fyrestar/THREE.InfiniteGridHelper)\r\nexport default function InfiniteGridHelper( size1, size2, color, distance, axes = 'xzy' ) {\r\n\r\n\tcolor = color || new THREE.Color( 'white' );\r\n\tsize1 = size1 || 10;\r\n\tsize2 = size2 || 100;\r\n\r\n\tdistance = distance || 8000;\r\n\r\n\r\n\r\n\tconst planeAxes = axes.substr( 0, 2 );\r\n\r\n\tconst geometry = new THREE.PlaneBufferGeometry( 2, 2, 1, 1 );\r\n\r\n\tconst material = new THREE.ShaderMaterial( {\r\n\r\n\t\tside: THREE.DoubleSide,\r\n\r\n\t\tuniforms: {\r\n\t\t\tuSize1: {\r\n\t\t\t\tvalue: size1\r\n\t\t\t},\r\n\t\t\tuSize2: {\r\n\t\t\t\tvalue: size2\r\n\t\t\t},\r\n\t\t\tuColor: {\r\n\t\t\t\tvalue: color\r\n\t\t\t},\r\n\t\t\tuDistance: {\r\n\t\t\t\tvalue: distance\r\n\t\t\t}\r\n\t\t},\r\n\t\ttransparent: true,\r\n\t\tvertexShader: `\r\n           \r\n           varying vec3 worldPosition;\r\n\t\t   \r\n           uniform float uDistance;\r\n           \r\n           void main() {\r\n           \r\n                vec3 pos = position.${axes} * uDistance;\r\n                pos.${planeAxes} += cameraPosition.${planeAxes};\r\n                \r\n                worldPosition = pos;\r\n                \r\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\r\n           \r\n           }\r\n           `,\r\n\r\n\r\n\t\tfragmentShader: `\r\n           \r\n           varying vec3 worldPosition;\r\n           \r\n           uniform float uSize1;\r\n           uniform float uSize2;\r\n           uniform vec3 uColor;\r\n           uniform float uDistance;\r\n            \r\n            \r\n            \r\n            float getGrid(float size) {\r\n            \r\n                vec2 r = worldPosition.${planeAxes} / size;\r\n                \r\n                \r\n                vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\r\n                float line = min(grid.x, grid.y);\r\n                \r\n            \r\n                return 1.0 - min(line, 1.0);\r\n            }\r\n            \r\n           void main() {\r\n           \r\n                \r\n                  float d = 1.0 - min(distance(cameraPosition.${planeAxes}, worldPosition.${planeAxes}) / uDistance, 1.0);\r\n                \r\n                  float g1 = getGrid(uSize1);\r\n                  float g2 = getGrid(uSize2);\r\n                  \r\n                  \r\n                  gl_FragColor = vec4(uColor.rgb, mix(g2, g1, g1) * pow(d, 3.0));\r\n                  gl_FragColor.a = mix(0.5 * gl_FragColor.a, gl_FragColor.a, g2);\r\n                \r\n                  if ( gl_FragColor.a <= 0.0 ) discard;\r\n                \r\n           \r\n           }\r\n           \r\n           `,\r\n\r\n\t\textensions: {\r\n\t\t\tderivatives: true\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\r\n\t// THREE.Mesh.call( this, geometry, material );\r\n\r\n\t// this.frustumCulled = false;\r\n\r\n\tlet grid = new THREE.Mesh(geometry, material);\r\n\r\n\tgrid.frustumCulled = false;\r\n\r\n\treturn grid\r\n\r\n};\r\n\r\nInfiniteGridHelper.prototype = {\r\n\t...THREE.Mesh.prototype,\r\n\t...THREE.Object3D.prototype,\r\n\t...THREE.EventDispatcher.prototype\r\n};","import * as THREE from 'three'\r\nimport InfiniteGridHelper from \"./InfiniteGridHelper\"\r\n\r\n\r\nexport function resizer(camera, renderer) {\r\n    // canvasRef.current.width = window.innerWidth;\r\n    // canvasRef.current.height = window.innerHeight;\r\n    // Set the camera's aspect ratio\r\n    // console.log(window.innerWidth);\r\n    \r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n\r\n    // update the camera's frustum\r\n    camera.updateProjectionMatrix();\r\n\r\n    // update the size of the renderer AND the canvas\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    // set the pixel ratio (for mobile devices)\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n}\r\n\r\nexport function SceneSetUp(scene) {\r\n\r\n    const background = new THREE.CubeTextureLoader()\r\n        .setPath(\"textures/cube/MilkyWay/\")\r\n        .load([\r\n            \"dark-s_px.jpg\",\r\n            \"dark-s_nx.jpg\",\r\n            \"dark-s_py.jpg\",\r\n            \"dark-s_ny.jpg\",\r\n            \"dark-s_pz.jpg\",\r\n            \"dark-s_nz.jpg\",\r\n        ]);\r\n\r\n    scene.background = background;\r\n\r\n    const grid = new InfiniteGridHelper(10, 100);\r\n    scene.add(grid);\r\n\r\n    LightSetUp(scene);\r\n}\r\n\r\n\r\nfunction LightSetUp(scene) {\r\n    const light = new THREE.AmbientLight(0x404040); // soft white light\r\n    scene.add(light);\r\n    // White directional light at half intensity shining from the top.\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n    scene.add(directionalLight);\r\n    const hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\r\n    scene.add(hemiLight);\r\n    const spotLight = new THREE.SpotLight(0xffa95c, 4);\r\n    spotLight.position.set(-50, 350, 50);\r\n    spotLight.castShadow = true;\r\n    // scene.add(spotLight);\r\n}","import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { KTX2Loader } from \"three/examples/jsm/loaders/KTX2Loader.js\";\r\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\r\nimport { MeshoptDecoder } from \"three/examples/jsm/libs/meshopt_decoder.module.js\";\r\n\r\nexport default function Loader(path, root , after=()=>{}) {\r\n  const loader = new GLTFLoader()\r\n    // .setCrossOrigin('anonymous')\r\n    .setDRACOLoader(new DRACOLoader().setDecoderPath(\"assets/wasm/\"))\r\n    .setKTX2Loader(new KTX2Loader().setTranscoderPath(\"assets/wasm/\"))\r\n    .setMeshoptDecoder(MeshoptDecoder);\r\n\r\n  \r\n\r\n  //.detectSupport(renderer)\r\n\r\n  loader.load(path, (gltf) => {\r\n    const scene2 = gltf.scene || gltf.scenes[0];\r\n    \r\n    if (!scene2) {\r\n      // Valid, but not supported by this viewer.\r\n      throw new Error(\r\n        \"This model contains no scene, and cannot be viewed here. However,\" +\r\n          \" it may contain individual 3D resources.\"\r\n      );\r\n    }\r\n\r\n    root.add(scene2);\r\n    after(scene2);\r\n  });\r\n\r\n}\r\n","/* eslint-disable prettier/prettier */\nimport * as THREE from \"three\";\n\nconst tmpQuaternion = new THREE.Quaternion();\nconst tmpMatrix = new THREE.Matrix4();\n\nconst centerVec = new THREE.Vector3(0, 0, 0);\nconst upVec = new THREE.Vector3(0, 1, 0);\n\nconst cameraVec = new THREE.Vector3();\nconst forwardVec = new THREE.Vector3();\nconst rightVec = new THREE.Vector3();\nconst tmpVec = new THREE.Vector3();\nconst directionVec = new THREE.Vector3();\n\nconst tmp = new THREE.Vector3();\n\nconst isOculusBrowser = /OculusBrowser/.test(navigator.userAgent);\n\nfunction TranslateHelperGeometry() {\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute('position', new THREE.Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3));\n  return geometry;\n}\n\nconst matHelper = new THREE.MeshBasicMaterial({\n  depthTest: false,\n  depthWrite: false,\n  transparent: true,\n  side: THREE.DoubleSide,\n  fog: false,\n  toneMapped: false\n});\n\nexport default class SpatialControls extends THREE.EventDispatcher {\n  constructor(\n    renderer,\n    cameraRig,\n    controller0,\n    controller1,\n    {\n      destMarker,\n      rightHanded = true,\n      playerHandHelper,\n      destHandHelper,\n      multiplyScalar = 3\n    } = {}\n  ) {\n    super();\n\n    this._xr = renderer.xr;\n\n    // player\n    this._cameraRig = cameraRig;\n\n    this._hander = rightHanded ? \"right\" : \"left\"\n\n    if (destMarker === undefined) {\n      destMarker = new THREE.Object3D();\n      const cone = new THREE.Mesh(new THREE.ConeGeometry(0.5, 1.5, 32), new THREE.MeshNormalMaterial({ wireframe: true }));\n      cone.rotateX(90 * Math.PI / 180)\n      destMarker.add(cone)\n      this._cameraRig.parent.add(destMarker)\n    }\n\n    // a hand that represent player's position\n    this._playerHand = new THREE.Object3D();\n    this._playerHand.position.set(0, 0.05, 0);\n    \n    if (playerHandHelper === undefined) {\n\n    } else {\n      this._playerHand.add(playerHandHelper)\n\n    }\n   \n    // a hand that represent the destination to teleport\n    this._destHand = new THREE.Object3D();\n    this._destHand.position.set(0, 0.05, 0);\n    if (destHandHelper === undefined) {\n\n    } else {\n      this._destHand.add(destHandHelper);\n\n    }\n\n    // each xr controller hand position represent player positon, teleport destination position\n    this._playerHandPos = new THREE.Vector3();\n    this._destHandPos = new THREE.Vector3();\n\n    // marker to show where to be teleported\n    this._destMarker = destMarker;\n\n    this._tmpVector = new THREE.Vector3();\n    this._resultVector = new THREE.Vector3();\n\n    // teleport distance multiply scalar\n    this._multiplyScalar = multiplyScalar;\n\n    this._helperLine = new THREE.Line(TranslateHelperGeometry(), matHelper);\n    this._helperLine2 = this._helperLine.clone();\n\n    this._cameraRig.parent.add(this._helperLine)\n    this._cameraRig.parent.add(this._helperLine2)\n\n    const onSelectEnd = () => {\n      this.teleport();\n    };\n\n    const onFromSqueezeStart = () => {\n      this._multiplyScalar *= 0.5;\n    };\n\n    const onToSqueezeStart = () => {\n      this._multiplyScalar *= 2;\n    };\n\n    controller0.addEventListener(\"selectend\", onSelectEnd);\n    controller1.addEventListener(\"selectend\", onSelectEnd);\n\n    if (rightHanded === !isOculusBrowser) {\n      controller0.add(this._destHand);\n      controller1.add(this._playerHand);\n      controller0.addEventListener(\"squeezestart\", onToSqueezeStart);\n      controller1.addEventListener(\"squeezestart\", onFromSqueezeStart);\n    } else {\n      controller0.add(this._playerHand);\n      controller1.add(this._destHand);\n      controller0.addEventListener(\"squeezestart\", onFromSqueezeStart);\n      controller1.addEventListener(\"squeezestart\", onToSqueezeStart);\n    }\n\n    tmpMatrix.lookAt(centerVec, new THREE.Vector3(0, 0, 1), upVec);\n\n    tmpQuaternion.setFromRotationMatrix(tmpMatrix);\n    this._destMarker.setRotationFromQuaternion(tmpQuaternion);\n  }\n\n  update() {\n    this._playerHand.getWorldPosition(this._playerHandPos);\n    this._destHand.getWorldPosition(this._destHandPos);\n\n    this._tmpVector.subVectors(this._destHandPos, this._playerHandPos);\n\n    this._tmpVector.multiplyScalar(this._multiplyScalar);\n    this._destMarker.position.copy(\n      this._tmpVector.add(this._cameraRig.position)\n    );\n\n\n    this._helperLine.position.copy(this._playerHandPos);\n    tmp.set(1e-10, 1e-10, 1e-10).add(this._destHandPos).sub(this._playerHandPos);\n    this._helperLine.scale.copy(tmp);\n\n    this._helperLine2.position.copy(this._cameraRig.position);\n    tmp.set(1e-10, 1e-10, 1e-10).add(this._cameraRig.position).sub(this._destMarker.position).multiplyScalar(- 1);\n    this._helperLine2.scale.copy(tmp);\n\n\n    const session = this._xr.getSession();\n    if (session) {\n      // only if we are in a webXR session\n      for (const sourceXR of session.inputSources) {\n\n        if (!sourceXR.gamepad) continue;\n        if (\n          sourceXR &&\n          sourceXR.gamepad &&\n          (sourceXR.gamepad.axes[2] || sourceXR.gamepad.axes[3]) &&\n          sourceXR.handedness === this._hander\n        ) {\n          // oculus joystick input\n          // [0,0,horizon,vertical]\n          //   -1\n          // -1   1\n          //    1\n          const axes = sourceXR.gamepad.axes;\n\n          this._destHand.getWorldDirection(cameraVec);\n\n\n          forwardVec.set(\n            cameraVec.x,\n            0,\n            cameraVec.z\n          );\n\n          rightVec.copy(forwardVec);\n\n          rightVec.applyAxisAngle(upVec, Math.PI / 2);\n\n          forwardVec.multiplyScalar(-axes[3]);\n          rightVec.multiplyScalar(-axes[2]);\n\n          tmpVec.addVectors(forwardVec, rightVec);\n\n          tmpVec.normalize();\n\n          tmpMatrix.lookAt(centerVec, tmpVec, upVec);\n\n          tmpQuaternion.setFromRotationMatrix(tmpMatrix);\n          this._destMarker.setRotationFromQuaternion(tmpQuaternion);\n        }\n      }\n    }\n\n  }\n\n  teleport() {\n    this._resultVector = this._tmpVector.subVectors(\n      this._destHandPos,\n      this._playerHandPos\n    );\n    this._cameraRig.position.add(\n      this._resultVector.multiplyScalar(this._multiplyScalar)\n    );\n\n    this._destMarker.getWorldDirection(directionVec);\n\n    tmpMatrix.lookAt(centerVec, directionVec, upVec);\n\n    tmpQuaternion.setFromRotationMatrix(tmpMatrix);\n    this._cameraRig.setRotationFromQuaternion(tmpQuaternion);\n  }\n}\n","import React, { useEffect, useRef } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { VRButton } from \"three/examples/jsm/webxr/VRButton.js\";\r\nimport { XRControllerModelFactory } from \"three/examples/jsm/webxr/XRControllerModelFactory.js\";\r\n\r\nimport { resizer, SceneSetUp } from \"../Utils/utils\";\r\nimport Loader from \"../Utils/loader\";\r\n\r\nimport SpatialControls from 'three-spatial-controls'\r\n// import SpatialControls from \"../Utils/JoystickSpatialControls\";\r\n\r\nlet scene, camera, renderer\r\nlet spatialControls;\r\n\r\nexport default function Main() {\r\n  const containerRef = useRef();\r\n  const canvasRef = useRef();\r\n  const vrButtonConRef = useRef();\r\n\r\n  useEffect(() => {\r\n    Init();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  function Init() {\r\n    \r\n    \r\n    \r\n    renderer = new THREE.WebGLRenderer({\r\n      antialias: true,\r\n      canvas: canvasRef.current,\r\n    });\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.xr.setFramebufferScaleFactor(2.0);\r\n    renderer.setAnimationLoop(Animate);\r\n    \r\n    vrButtonConRef.current.appendChild(VRButton.createButton(renderer));\r\n    \r\n    \r\n    \r\n    scene = new THREE.Scene();\r\n    renderer.xr.enabled = true;\r\n    camera = new THREE.PerspectiveCamera(75,window.innerWidth / window.innerHeight,0.1,10000);\r\n    let cameraRig = new THREE.Group();\r\n    let controller0 = renderer.xr.getController(0);\r\n    let controller1 = renderer.xr.getController(1);\r\n    \r\n    scene.add(cameraRig);\r\n    cameraRig.add(camera);\r\n    cameraRig.add(controller0);\r\n    cameraRig.add(controller1);\r\n    \r\n    \r\n    // cameraRig.position.set(0, 0, 5);\r\n    SceneSetUp(scene);\r\n    window.addEventListener(\"resize\", () => resizer(camera, renderer));\r\n    \r\n    const controllerModelFactory = new XRControllerModelFactory();\r\n\r\n    let controllerGrip1 = renderer.xr.getControllerGrip(0);\r\n    controllerGrip1.add(\r\n      controllerModelFactory.createControllerModel(controllerGrip1)\r\n    );\r\n\r\n    let controllerGrip2 = renderer.xr.getControllerGrip(1);\r\n    controllerGrip2.add(\r\n      controllerModelFactory.createControllerModel(controllerGrip2)\r\n    );\r\n\r\n    cameraRig.add(controllerGrip1);\r\n    cameraRig.add(controllerGrip2);\r\n\r\n    let destMarker = new THREE.Group();\r\n    scene.add(destMarker);\r\n\r\n    Loader(\"model/opaDuck.gltf\", destMarker);\r\n    // Loader(\"model/scene.gltf\", destMarker);\r\n\r\n    Loader(\"model/house.gltf\", scene, (obj) => {\r\n      obj.scale.set(15, 15, 15);\r\n      obj.position.set(0, 0, -10);\r\n    });\r\n\r\n\r\n    const loader = new THREE.FontLoader();\r\n\r\n    let playerHandHelper = new THREE.Group();\r\n    let destHandHelper = new THREE.Group();\r\n\r\n    loader.load(\"fonts/helvetiker_regular.typeface.json\", (font) => {\r\n      const geometry = new THREE.TextGeometry(\"From\", {\r\n        font: font,\r\n        size: 0.05,\r\n        height: 0.05,\r\n      });\r\n\r\n      playerHandHelper.add(\r\n        new THREE.Mesh(geometry, new THREE.MeshNormalMaterial())\r\n      );\r\n\r\n      const geometry2 = new THREE.TextGeometry(\"To\", {\r\n        font: font,\r\n        size: 0.05,\r\n        height: 0.05,\r\n      });\r\n\r\n      destHandHelper.add(\r\n        new THREE.Mesh(geometry2, new THREE.MeshNormalMaterial())\r\n      );\r\n    });\r\n\r\n\r\n\r\n\r\n    spatialControls = new SpatialControls(\r\n      renderer,\r\n      cameraRig,\r\n      controller0,\r\n      controller1,\r\n      {\r\n        destMarker: destMarker,\r\n        // rightHanded: true,\r\n        // playerHandHelper: playerHandHelper,\r\n        // destHandHelper: destHandHelper,\r\n        // multiplyScalar: 1\r\n      }\r\n    );\r\n  }\r\n\r\n  function Animate() {\r\n    spatialControls.update();\r\n\r\n    renderer.render(scene, camera);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        height: \"100vh\",\r\n        overflowX: \"hidden\",\r\n        overflowY: \"hidden\",\r\n      }}\r\n      ref={containerRef}\r\n    >\r\n      <canvas ref={canvasRef} />\r\n      <div ref={vrButtonConRef}></div>\r\n    </div>\r\n  );\r\n}","import React from 'react'\n\n\nimport 'three-spatial-controls/dist/index.css'\n\nimport SpatialControlsPage from './Page/joystickRotateSpatial'\n\n// const App = () => {\n//   return <ExampleComponent text=\"Create React Library Example 😄\" />\n// }\n\nconst App = () => {\n  return <SpatialControlsPage />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}